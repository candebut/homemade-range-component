[{"C:\\Users\\l0501856\\range\\my-app\\src\\index.js":"1","C:\\Users\\l0501856\\range\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\l0501856\\range\\my-app\\src\\App.js":"3","C:\\Users\\l0501856\\range\\my-app\\src\\components\\Range.js":"4","C:\\Users\\l0501856\\range\\my-app\\src\\utils\\helper.js":"5","C:\\Users\\l0501856\\range\\my-app\\src\\components\\EditableBox.js":"6","C:\\Users\\l0501856\\range\\my-app\\src\\components\\Button.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":2369,"mtime":1611603484255,"results":"11","hashOfConfig":"9"},{"size":22054,"mtime":1611593333259,"results":"12","hashOfConfig":"9"},{"size":383,"mtime":1611593109537,"results":"13","hashOfConfig":"9"},{"size":765,"mtime":1611342123634,"results":"14","hashOfConfig":"9"},{"size":164,"mtime":1611600639508,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"l95tn7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\l0501856\\range\\my-app\\src\\index.js",[],["34","35"],"C:\\Users\\l0501856\\range\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\l0501856\\range\\my-app\\src\\App.js",[],"C:\\Users\\l0501856\\range\\my-app\\src\\components\\Range.js",["36","37","38","39","40","41"],"import React from \"react\";\r\nimport EditableBox from \"./EditableBox\";\r\n\r\nclass Range extends React.Component {\r\n  state = {\r\n    min: this.props.min,\r\n    max: this.props.max,\r\n    slots: this.props.slots,\r\n    start: this.props.start,\r\n    end: this.props.end,\r\n    fixed: this.props.fixed,\r\n    fixedValues: this.props.fixedValues,\r\n  };\r\n\r\n  onDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  onDragStart = (e) => {\r\n    let slider = e.target.dataset.slider;\r\n    this.sliderType = slider;\r\n  };\r\n\r\n  onDrag = (e) => {};\r\n\r\n  onDrop = (e, target) => {\r\n    let source = this.sliderType;\r\n    let slot = Number(e.target.dataset.slot);\r\n\r\n    if (isNaN(slot)) return;\r\n\r\n    if (source === \"min\") {\r\n      //TODO no anda validacion: cuando es mas chico o mas grande de lo que deberia, se muestra la bullet igual\r\n      if (slot >= this.state.end || slot < this.state.min) return;\r\n      this.setState({\r\n        start: slot,\r\n      });\r\n    } else if (source === \"max\") {\r\n      if (slot <= this.state.start || slot > this.state.max) return;\r\n      this.setState({\r\n        end: slot,\r\n      });\r\n    }\r\n    this.sliderType = null;\r\n  };\r\n\r\n  getCloser = (e, array) => {\r\n    let counts = array,\r\n      goal = e.target.value;\r\n\r\n    let closest = counts.reduce(function (prev, curr) {\r\n      return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;\r\n    });\r\n    return closest;\r\n  };\r\n\r\n  validateStart = (e) => {\r\n    let closestValue = this.getCloser(e, this.state.fixedValues);\r\n    this.setState({ start: closestValue });\r\n  };\r\n\r\n  validateEnd = (e) => {\r\n    let closestValue = this.getCloser(e, this.state.fixedValues);\r\n    this.setState({ end: closestValue });\r\n  };\r\n\r\n  getNonFixedArray = () => {\r\n    let nonFixedList = [];\r\n    for (let i = 0; i <= this.state.slots; i++) {\r\n      nonFixedList.push(i);\r\n    }\r\n    return nonFixedList;\r\n  };\r\n\r\n  handleChangeStart = (e) => {\r\n    let nonFixedList = this.getNonFixedArray();\r\n    let exactValue = this.getCloser(e, nonFixedList);\r\n    this.setState({ start: exactValue });\r\n  };\r\n\r\n  handleChangeEnd = (e) => {\r\n    let nonFixedList = this.getNonFixedArray();\r\n    let exactValue = this.getCloser(e, nonFixedList);\r\n    this.setState({ end: exactValue });\r\n  };\r\n\r\n  MinSlider = () => {\r\n    return (\r\n      <div\r\n        data-slider=\"min\"\r\n        onDragStart={this.onDragStart}\r\n        onTouchStart={this.onDragStart}\r\n        onDrag={this.onDrag}\r\n        draggable\r\n        className=\"slider-thumb slider-thumb-min\"\r\n      ></div>\r\n    );\r\n  };\r\n\r\n  MaxSlider = () => {\r\n    return (\r\n      <div\r\n        data-slider=\"max\"\r\n        onDragStart={this.onDragStart}\r\n        onTouchStart={this.onDragStart}\r\n        onDrag={this.onDrag}\r\n        draggable\r\n        className=\"slider-thumb slider-thumb-max\"\r\n      ></div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (\r\n      this.state.start < this.state.min ||\r\n      this.state.start > this.state.end ||\r\n      this.state.end < this.state.start ||\r\n      this.state.end > this.state.max\r\n    ) {\r\n      alert(\"El numero ingresado es incorrecto\");\r\n    }\r\n    let slider = [];\r\n    let currentScale = [];\r\n    let nonFixedList = this.getNonFixedArray();\r\n\r\n    const getItems = (array) => {\r\n      this.items = array.map((item, i) => (\r\n        <>\r\n          <div\r\n            data-slot={item}\r\n            onDragOver={this.onDragOver}\r\n            onTouchMove={this.onDragOver}\r\n            onTouchEnd={this.onDrop}\r\n            onDrop={this.onDrop}\r\n            key={i}\r\n            className={`slot ${\r\n              this.state.fixed ? \"fixed-slot\" : \"classic-slot\"\r\n            }`}\r\n          >\r\n            <div className=\"thumb\"></div>\r\n            <div\r\n              data-slot={item}\r\n              className={`line ${this.state.fixed ? \"custom-line\" : \"\"} ${\r\n                item >= this.state.start && item < this.state.end\r\n                  ? \"line-selected\"\r\n                  : \"\"\r\n              }`}\r\n            />\r\n            {this.state.fixed ? null : <span className=\"scale-mark\"></span>}\r\n            <div className=\"thumb\"></div>\r\n            {item === this.state.start ? (\r\n              <this.MinSlider />\r\n            ) : item === this.state.end ? (\r\n              <this.MaxSlider />\r\n            ) : null}\r\n            <h4\r\n              className={`slot-scale ${\r\n                this.state.fixed ? \"custom-scale\" : \"current\"\r\n              }`}\r\n            >\r\n              {this.state.fixed\r\n                ? item\r\n                : item === 25 || item === 50 || item === 75\r\n                ? item\r\n                : null}\r\n            </h4>\r\n          </div>\r\n        </>\r\n      ));\r\n    };\r\n\r\n    if (this.state.fixed === true) getItems(this.state.fixedValues);\r\n    else getItems(nonFixedList);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <EditableBox\r\n          className=\"editable-box\"\r\n          text={this.state.start}\r\n          type=\"input\"\r\n        >\r\n          <form>\r\n            <input\r\n              type=\"number\"\r\n              name=\"min\"\r\n              min={this.state.min}\r\n              max={`${this.state.end}`}\r\n              aria-label=\"Cantidad mínima\"\r\n              value={this.state.start}\r\n              onChange={\r\n                this.state.fixed\r\n                  ? (e) => this.validateStart(e)\r\n                  : (e) => this.handleChangeStart(e)\r\n              }\r\n            />\r\n          </form>\r\n        </EditableBox>\r\n        <div className=\"range-container\">\r\n          <div className=\"example-1\">\r\n            <div className=\"slider-container\">\r\n              <div className=\"slider-scale\">{this.items}</div>\r\n\r\n              <div className=\"slider\">{slider}</div>\r\n              <div className=\"slider-selected-scale\">{currentScale}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <EditableBox text={this.state.end} type=\"input\">\r\n          <form>\r\n            <input\r\n              type=\"number\"\r\n              name=\"max\"\r\n              min={this.state.start}\r\n              max={this.state.max}\r\n              aria-label=\"Cantidad máxima\"\r\n              value={this.state.end}\r\n              onChange={\r\n                this.state.fixed\r\n                  ? (e) => this.validateEnd(e)\r\n                  : (e) => this.handleChangeEnd(e)\r\n              }\r\n            />\r\n          </form>\r\n        </EditableBox>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Range;\r\n\r\nvar DragDropTouch;\r\n(function (DragDropTouch_1) {\r\n  \"use strict\";\r\n  /**\r\n   * Object used to hold the data that is being dragged during drag and drop operations.\r\n   *\r\n   * It may hold one or more data items of different types. For more information about\r\n   * drag and drop operations and data transfer objects, see\r\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n   *\r\n   * This object is created automatically by the @see:DragDropTouch singleton and is\r\n   * accessible through the @see:dataTransfer property of all drag events.\r\n   */\r\n  var DataTransfer = (function () {\r\n    function DataTransfer() {\r\n      this._dropEffect = \"move\";\r\n      this._effectAllowed = \"all\";\r\n      this._data = {};\r\n    }\r\n    Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n      /**\r\n       * Gets or sets the type of drag-and-drop operation currently selected.\r\n       * The value must be 'none',  'copy',  'link', or 'move'.\r\n       */\r\n      get: function () {\r\n        return this._dropEffect;\r\n      },\r\n      set: function (value) {\r\n        this._dropEffect = value;\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    });\r\n    Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n      /**\r\n       * Gets or sets the types of operations that are possible.\r\n       * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n       * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n       */\r\n      get: function () {\r\n        return this._effectAllowed;\r\n      },\r\n      set: function (value) {\r\n        this._effectAllowed = value;\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    });\r\n    Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n      /**\r\n       * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n       */\r\n      get: function () {\r\n        return Object.keys(this._data);\r\n      },\r\n      enumerable: true,\r\n      configurable: true,\r\n    });\r\n    /**\r\n     * Removes the data associated with a given type.\r\n     *\r\n     * The type argument is optional. If the type is empty or not specified, the data\r\n     * associated with all types is removed. If data for the specified type does not exist,\r\n     * or the data transfer contains no data, this method will have no effect.\r\n     *\r\n     * @param type Type of data to remove.\r\n     */\r\n    DataTransfer.prototype.clearData = function (type) {\r\n      if (type != null) {\r\n        delete this._data[type];\r\n      } else {\r\n        this._data = null;\r\n      }\r\n    };\r\n    /**\r\n     * Retrieves the data for a given type, or an empty string if data for that type does\r\n     * not exist or the data transfer contains no data.\r\n     *\r\n     * @param type Type of data to retrieve.\r\n     */\r\n    DataTransfer.prototype.getData = function (type) {\r\n      return this._data[type] || \"\";\r\n    };\r\n    /**\r\n     * Set the data for a given type.\r\n     *\r\n     * For a list of recommended drag types, please see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n     *\r\n     * @param type Type of data to add.\r\n     * @param value Data to add.\r\n     */\r\n    DataTransfer.prototype.setData = function (type, value) {\r\n      this._data[type] = value;\r\n    };\r\n    /**\r\n     * Set the image to be used for dragging if a custom one is desired.\r\n     *\r\n     * @param img An image element to use as the drag feedback image.\r\n     * @param offsetX The horizontal offset within the image.\r\n     * @param offsetY The vertical offset within the image.\r\n     */\r\n    DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {\r\n      var ddt = DragDropTouch._instance;\r\n      ddt._imgCustom = img;\r\n      ddt._imgOffset = { x: offsetX, y: offsetY };\r\n    };\r\n    return DataTransfer;\r\n  })();\r\n  DragDropTouch_1.DataTransfer = DataTransfer;\r\n  /**\r\n   * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n   *\r\n   * The @see:DragDropTouch class listens to touch events and raises the\r\n   * appropriate HTML5 drag/drop events as if the events had been caused\r\n   * by mouse actions.\r\n   *\r\n   * The purpose of this class is to enable using existing, standard HTML5\r\n   * drag/drop code on mobile devices running IOS or Android.\r\n   *\r\n   * To use, include the DragDropTouch.js file on the page. The class will\r\n   * automatically start monitoring touch events and will raise the HTML5\r\n   * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n   * should be handled by the application.\r\n   *\r\n   * For details and examples on HTML drag and drop, see\r\n   * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n   */\r\n  var DragDropTouch = (function () {\r\n    /**\r\n     * Initializes the single instance of the @see:DragDropTouch class.\r\n     */\r\n    function DragDropTouch() {\r\n      this._lastClick = 0;\r\n      // enforce singleton pattern\r\n      if (DragDropTouch._instance) {\r\n        throw \"DragDropTouch instance already created.\";\r\n      }\r\n      // detect passive event support\r\n      // https://github.com/Modernizr/Modernizr/issues/1894\r\n      var supportsPassive = false;\r\n      document.addEventListener(\"test\", function () {}, {\r\n        get passive() {\r\n          supportsPassive = true;\r\n          return true;\r\n        },\r\n      });\r\n      // listen to touch events\r\n      if (\"ontouchstart\" in document) {\r\n        var d = document,\r\n          ts = this._touchstart.bind(this),\r\n          tm = this._touchmove.bind(this),\r\n          te = this._touchend.bind(this),\r\n          opt = supportsPassive ? { passive: false, capture: false } : false;\r\n        d.addEventListener(\"touchstart\", ts, opt);\r\n        d.addEventListener(\"touchmove\", tm, opt);\r\n        d.addEventListener(\"touchend\", te);\r\n        d.addEventListener(\"touchcancel\", te);\r\n      }\r\n    }\r\n    /**\r\n     * Gets a reference to the @see:DragDropTouch singleton.\r\n     */\r\n    DragDropTouch.getInstance = function () {\r\n      return DragDropTouch._instance;\r\n    };\r\n    // ** event handlers\r\n    DragDropTouch.prototype._touchstart = function (e) {\r\n      var _this = this;\r\n      if (this._shouldHandle(e)) {\r\n        // raise double-click and prevent zooming\r\n        if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n          if (this._dispatchEvent(e, \"dblclick\", e.target)) {\r\n            e.preventDefault();\r\n            this._reset();\r\n            return;\r\n          }\r\n        }\r\n        // clear all variables\r\n        this._reset();\r\n        // get nearest draggable element\r\n        var src = this._closestDraggable(e.target);\r\n        if (src) {\r\n          // give caller a chance to handle the hover/move events\r\n          if (\r\n            !this._dispatchEvent(e, \"mousemove\", e.target) &&\r\n            !this._dispatchEvent(e, \"mousedown\", e.target)\r\n          ) {\r\n            // get ready to start dragging\r\n            this._dragSource = src;\r\n            this._ptDown = this._getPoint(e);\r\n            this._lastTouch = e;\r\n            e.preventDefault();\r\n            // show context menu if the user hasn't started dragging after a while\r\n            setTimeout(function () {\r\n              if (_this._dragSource == src && _this._img == null) {\r\n                if (_this._dispatchEvent(e, \"contextmenu\", src)) {\r\n                  _this._reset();\r\n                }\r\n              }\r\n            }, DragDropTouch._CTXMENU);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    DragDropTouch.prototype._touchmove = function (e) {\r\n      if (this._shouldHandle(e)) {\r\n        // see if target wants to handle move\r\n        var target = this._getTarget(e);\r\n        if (this._dispatchEvent(e, \"mousemove\", target)) {\r\n          this._lastTouch = e;\r\n          e.preventDefault();\r\n          return;\r\n        }\r\n        // start dragging\r\n        if (this._dragSource && !this._img) {\r\n          var delta = this._getDelta(e);\r\n          if (delta > DragDropTouch._THRESHOLD) {\r\n            this._dispatchEvent(e, \"dragstart\", this._dragSource);\r\n            this._createImage(e);\r\n            this._dispatchEvent(e, \"dragenter\", target);\r\n          }\r\n        }\r\n        // continue dragging\r\n        if (this._img) {\r\n          this._lastTouch = e;\r\n          e.preventDefault(); // prevent scrolling\r\n          if (target != this._lastTarget) {\r\n            this._dispatchEvent(this._lastTouch, \"dragleave\", this._lastTarget);\r\n            this._dispatchEvent(e, \"dragenter\", target);\r\n            this._lastTarget = target;\r\n          }\r\n          this._moveImage(e);\r\n          this._dispatchEvent(e, \"dragover\", target);\r\n        }\r\n      }\r\n    };\r\n    DragDropTouch.prototype._touchend = function (e) {\r\n      if (this._shouldHandle(e)) {\r\n        // see if target wants to handle up\r\n        if (this._dispatchEvent(this._lastTouch, \"mouseup\", e.target)) {\r\n          e.preventDefault();\r\n          return;\r\n        }\r\n        // user clicked the element but didn't drag, so clear the source and simulate a click\r\n        if (!this._img) {\r\n          this._dragSource = null;\r\n          this._dispatchEvent(this._lastTouch, \"click\", e.target);\r\n          this._lastClick = Date.now();\r\n        }\r\n        // finish dragging\r\n        this._destroyImage();\r\n        if (this._dragSource) {\r\n          if (e.type.indexOf(\"cancel\") < 0) {\r\n            this._dispatchEvent(this._lastTouch, \"drop\", this._lastTarget);\r\n          }\r\n          this._dispatchEvent(this._lastTouch, \"dragend\", this._dragSource);\r\n          this._reset();\r\n        }\r\n      }\r\n    };\r\n    // ** utilities\r\n    // ignore events that have been handled or that involve more than one touch\r\n    DragDropTouch.prototype._shouldHandle = function (e) {\r\n      return e && !e.defaultPrevented && e.touches && e.touches.length < 2;\r\n    };\r\n    // clear all members\r\n    DragDropTouch.prototype._reset = function () {\r\n      this._destroyImage();\r\n      this._dragSource = null;\r\n      this._lastTouch = null;\r\n      this._lastTarget = null;\r\n      this._ptDown = null;\r\n      this._dataTransfer = new DataTransfer();\r\n    };\r\n    // get point for a touch event\r\n    DragDropTouch.prototype._getPoint = function (e, page) {\r\n      if (e && e.touches) {\r\n        e = e.touches[0];\r\n      }\r\n      return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n    };\r\n    // get distance between the current touch event and the first one\r\n    DragDropTouch.prototype._getDelta = function (e) {\r\n      var p = this._getPoint(e);\r\n      return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n    };\r\n    // get the element at a given touch event\r\n    DragDropTouch.prototype._getTarget = function (e) {\r\n      var pt = this._getPoint(e),\r\n        el = document.elementFromPoint(pt.x, pt.y);\r\n      while (el && getComputedStyle(el).pointerEvents == \"none\") {\r\n        el = el.parentElement;\r\n      }\r\n      return el;\r\n    };\r\n    // create drag image from source element\r\n    DragDropTouch.prototype._createImage = function (e) {\r\n      // just in case...\r\n      if (this._img) {\r\n        this._destroyImage();\r\n      }\r\n      // create drag image from custom element or drag source\r\n      var src = this._imgCustom || this._dragSource;\r\n      this._img = src.cloneNode(true);\r\n      this._copyStyle(src, this._img);\r\n      this._img.style.top = this._img.style.left = \"-9999px\";\r\n      // if creating from drag source, apply offset and opacity\r\n      if (!this._imgCustom) {\r\n        var rc = src.getBoundingClientRect(),\r\n          pt = this._getPoint(e);\r\n        this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n        this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n      }\r\n      // add image to document\r\n      this._moveImage(e);\r\n      document.body.appendChild(this._img);\r\n    };\r\n    // dispose of drag image element\r\n    DragDropTouch.prototype._destroyImage = function () {\r\n      if (this._img && this._img.parentElement) {\r\n        this._img.parentElement.removeChild(this._img);\r\n      }\r\n      this._img = null;\r\n      this._imgCustom = null;\r\n    };\r\n    // move the drag image element\r\n    DragDropTouch.prototype._moveImage = function (e) {\r\n      var _this = this;\r\n      requestAnimationFrame(function () {\r\n        if (_this._img) {\r\n          var pt = _this._getPoint(e, true),\r\n            s = _this._img.style;\r\n          s.position = \"absolute\";\r\n          s.pointerEvents = \"none\";\r\n          s.zIndex = \"999999\";\r\n          s.left = Math.round(pt.x - _this._imgOffset.x) + \"px\";\r\n          s.top = Math.round(pt.y - _this._imgOffset.y) + \"px\";\r\n        }\r\n      });\r\n    };\r\n    // copy properties from an object to another\r\n    DragDropTouch.prototype._copyProps = function (dst, src, props) {\r\n      for (var i = 0; i < props.length; i++) {\r\n        var p = props[i];\r\n        dst[p] = src[p];\r\n      }\r\n    };\r\n    DragDropTouch.prototype._copyStyle = function (src, dst) {\r\n      // remove potentially troublesome attributes\r\n      DragDropTouch._rmvAtts.forEach(function (att) {\r\n        dst.removeAttribute(att);\r\n      });\r\n      // copy canvas content\r\n      if (src instanceof HTMLCanvasElement) {\r\n        var cSrc = src,\r\n          cDst = dst;\r\n        cDst.width = cSrc.width;\r\n        cDst.height = cSrc.height;\r\n        cDst.getContext(\"2d\").drawImage(cSrc, 0, 0);\r\n      }\r\n      // copy style (without transitions)\r\n      var cs = getComputedStyle(src);\r\n      for (var i = 0; i < cs.length; i++) {\r\n        var key = cs[i];\r\n        if (key.indexOf(\"transition\") < 0) {\r\n          dst.style[key] = cs[key];\r\n        }\r\n      }\r\n      dst.style.pointerEvents = \"none\";\r\n      // and repeat for all children\r\n      for (var i = 0; i < src.children.length; i++) {\r\n        this._copyStyle(src.children[i], dst.children[i]);\r\n      }\r\n    };\r\n    DragDropTouch.prototype._dispatchEvent = function (e, type, target) {\r\n      if (e && target) {\r\n        var evt = document.createEvent(\"Event\"),\r\n          t = e.touches ? e.touches[0] : e;\r\n        evt.initEvent(type, true, true);\r\n        evt.button = 0;\r\n        evt.which = evt.buttons = 1;\r\n        this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n        this._copyProps(evt, t, DragDropTouch._ptProps);\r\n        evt.dataTransfer = this._dataTransfer;\r\n        target.dispatchEvent(evt);\r\n        return evt.defaultPrevented;\r\n      }\r\n      return false;\r\n    };\r\n    // gets an element's closest draggable ancestor\r\n    DragDropTouch.prototype._closestDraggable = function (e) {\r\n      for (; e; e = e.parentElement) {\r\n        if (e.hasAttribute(\"draggable\") && e.draggable) {\r\n          return e;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n    return DragDropTouch;\r\n  })();\r\n  /*private*/ DragDropTouch._instance = new DragDropTouch(); // singleton\r\n  // constants\r\n  DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n  DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n  DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n  DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n  // copy styles/attributes from drag source to drag image element\r\n  DragDropTouch._rmvAtts = \"id,class,style,draggable\".split(\",\");\r\n  // synthesize and dispatch an event\r\n  // returns true if the event has been handled (e.preventDefault == true)\r\n  DragDropTouch._kbdProps = \"altKey,ctrlKey,metaKey,shiftKey\".split(\",\");\r\n  DragDropTouch._ptProps = \"pageX,pageY,clientX,clientY,screenX,screenY\".split(\r\n    \",\"\r\n  );\r\n  DragDropTouch_1.DragDropTouch = DragDropTouch;\r\n})(DragDropTouch || (DragDropTouch = {}));\r\n","C:\\Users\\l0501856\\range\\my-app\\src\\utils\\helper.js",[],"C:\\Users\\l0501856\\range\\my-app\\src\\components\\EditableBox.js",["42","43"],"import React, { useState } from \"react\";\r\n\r\nconst Editable = ({ text, type, children, ...props }) => {\r\n  const [isEditing, setEditing] = useState(false);\r\n\r\n  const handleKeyDown = (event, type) => {\r\n    const { key } = event;\r\n    const keys = [\"Escape\", \"Tab\"];\r\n    const enterKey = \"Enter\";\r\n    const allKeys = [...keys, enterKey];\r\n  };\r\n\r\n  return (\r\n    <section {...props}>\r\n      {isEditing ? (\r\n        <div\r\n          onBlur={() => setEditing(false)}\r\n          onKeyDown={(e) => handleKeyDown(e, type)}\r\n        >\r\n          {children}\r\n        </div>\r\n      ) : (\r\n        <div className=\"editable-box\" onClick={() => setEditing(true)}>\r\n          <span>{text}</span>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Editable;\r\n","C:\\Users\\l0501856\\range\\my-app\\src\\components\\Button.js",["44"],"import { useHistory } from \"react-router-dom\";\r\n\r\nfunction Button({ route, text }) {\r\n  return <button type=\"button\">{text}</button>;\r\n}\r\n\r\nexport default Button;\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":234,"column":3,"nodeType":"51","messageId":"52","endLine":234,"endColumn":16,"fix":"53"},{"ruleId":"54","severity":1,"message":"55","line":368,"column":9,"nodeType":"56","messageId":"57","endLine":368,"endColumn":57},{"ruleId":"58","severity":1,"message":"59","line":427,"column":37,"nodeType":"60","messageId":"61","endLine":427,"endColumn":39},{"ruleId":"58","severity":1,"message":"62","line":459,"column":22,"nodeType":"60","messageId":"61","endLine":459,"endColumn":24},{"ruleId":"58","severity":1,"message":"59","line":523,"column":55,"nodeType":"60","messageId":"61","endLine":523,"endColumn":57},{"ruleId":"63","severity":1,"message":"64","line":603,"column":16,"nodeType":"65","messageId":"66","endLine":603,"endColumn":17},{"ruleId":"67","severity":1,"message":"68","line":7,"column":13,"nodeType":"65","messageId":"69","endLine":7,"endColumn":16},{"ruleId":"67","severity":1,"message":"70","line":10,"column":11,"nodeType":"65","messageId":"69","endLine":10,"endColumn":18},{"ruleId":"67","severity":1,"message":"71","line":1,"column":10,"nodeType":"65","messageId":"69","endLine":1,"endColumn":20},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"74","text":"75"},"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'i' is already defined.","Identifier","redeclared","no-unused-vars","'key' is assigned a value but never used.","unusedVar","'allKeys' is assigned a value but never used.","'useHistory' is defined but never used.","no-global-assign","no-unsafe-negation",[6464,6477],""]